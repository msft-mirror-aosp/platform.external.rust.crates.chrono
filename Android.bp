// This file is generated by cargo_embargo.
// Do not modify this file after the first "rust_*" or "genrule" module
// because the changes will be overridden on upgrade.
// Content before the first "rust_*" or "genrule" module is preserved.

package {
    default_applicable_licenses: ["external_rust_crates_chrono_license"],
}

// Added automatically by a large-scale-change that took the approach of
// 'apply every license found to every target'. While this makes sure we respect
// every license restriction, it may not be entirely correct.
//
// e.g. GPL in an MIT project might only apply to the contrib/ directory.
//
// Please consider splitting the single license below into multiple licenses,
// taking care not to lose any license_kind information, and overriding the
// default license using the 'licenses: [...]' property on targets as needed.
//
// For unused files, consider creating a 'fileGroup' with "//visibility:private"
// to attach the license to, and including a comment whether the files may be
// used in the current project.
// See: http://go/android-license-faq
license {
    name: "external_rust_crates_chrono_license",
    visibility: [":__subpackages__"],
    license_kinds: [
        "SPDX-license-identifier-Apache-2.0",
        "SPDX-license-identifier-MIT",
    ],
    license_text: [
        "LICENSE.txt",
    ],
}

rust_test {
    name: "chrono_test_src_lib",
    host_supported: true,
    crate_name: "chrono",
    cargo_env_compat: true,
    cargo_pkg_version: "0.4.34",
    srcs: ["src/lib.rs"],
    test_suites: ["general-tests"],
    auto_gen_config: true,
    test_options: {
        unit_test: true,
    },
    edition: "2021",
    features: [
        "alloc",
        "now",
        "serde",
        "std",
    ],
    rustlibs: [
        "libbincode",
        "libnum_traits",
        "libserde",
        "libserde_json",
    ],
    proc_macros: ["libserde_derive"],
}

rust_test {
    name: "chrono_test_tests_dateutils",
    host_supported: true,
    crate_name: "dateutils",
    cargo_env_compat: true,
    cargo_pkg_version: "0.4.34",
    srcs: ["tests/dateutils.rs"],
    test_suites: ["general-tests"],
    auto_gen_config: true,
    test_options: {
        unit_test: true,
    },
    edition: "2021",
    features: [
        "alloc",
        "now",
        "serde",
        "std",
    ],
    rustlibs: [
        "libbincode",
        "libchrono",
        "libnum_traits",
        "libserde",
        "libserde_json",
    ],
    proc_macros: ["libserde_derive"],
}

rust_test {
    name: "chrono_test_tests_wasm",
    host_supported: true,
    crate_name: "wasm",
    cargo_env_compat: true,
    cargo_pkg_version: "0.4.34",
    srcs: ["tests/wasm.rs"],
    test_suites: ["general-tests"],
    auto_gen_config: true,
    test_options: {
        unit_test: true,
    },
    edition: "2021",
    features: [
        "alloc",
        "now",
        "serde",
        "std",
    ],
    rustlibs: [
        "libbincode",
        "libchrono",
        "libnum_traits",
        "libserde",
        "libserde_json",
    ],
    proc_macros: ["libserde_derive"],
}

rust_test {
    name: "chrono_test_tests_win_bindings",
    host_supported: true,
    crate_name: "win_bindings",
    cargo_env_compat: true,
    cargo_pkg_version: "0.4.34",
    srcs: ["tests/win_bindings.rs"],
    test_suites: ["general-tests"],
    auto_gen_config: true,
    test_options: {
        unit_test: true,
    },
    edition: "2021",
    features: [
        "alloc",
        "now",
        "serde",
        "std",
    ],
    rustlibs: [
        "libbincode",
        "libchrono",
        "libnum_traits",
        "libserde",
        "libserde_json",
    ],
    proc_macros: ["libserde_derive"],
}

rust_library {
    name: "libchrono",
    host_supported: true,
    crate_name: "chrono",
    cargo_env_compat: true,
    cargo_pkg_version: "0.4.34",
    srcs: ["src/lib.rs"],
    edition: "2021",
    features: [
        "alloc",
        "now",
        "serde",
        "std",
    ],
    rustlibs: [
        "libnum_traits",
        "libserde",
    ],
    apex_available: [
        "//apex_available:platform",
        "com.android.virt",
    ],
    product_available: true,
    vendor_available: true,
}
